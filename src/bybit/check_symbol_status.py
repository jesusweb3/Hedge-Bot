# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ Bybit (V5).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç pybit==5.11.0, —á–∏—Ç–∞–µ—Ç BYBIT_TESTNET –∏–∑ .env.
–í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ –∑–∞–¥–∞—ë—Ç—Å—è SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT").
–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è –ø–µ—á–∞—Ç–∞–µ—Ç:
- "YES Trading", –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
- "NO <status>", –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –ó–¥–µ—Å—å –∑–∞–¥–∞—ë–º –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Å–∏–º–≤–æ–ª
SYMBOL = "BTCUSDT"


def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}


def check_symbol_status(symbol: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–º–≤–æ–ª–∞ –Ω–∞ Bybit.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_trading: bool, status: str).
    """
    load_dotenv()
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    http = HTTP(testnet=testnet, timeout=10_000, recv_window=5_000)

    resp = http.get_instruments_info(category="linear", symbol=symbol)

    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    instruments = resp["result"]["list"]
    if not instruments:
        return False, "NotFound"

    status = instruments[0].get("status", "Unknown")
    return status == "Trading", status


if __name__ == "__main__":
    try:
        ok, reason = check_symbol_status(SYMBOL)
        if ok:
            print(f"YES {reason}")
        else:
            print(f"NO {reason}")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
