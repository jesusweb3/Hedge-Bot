# -*- coding: utf-8 -*-
"""
–ü–æ–∏—Å–∫ –æ—Ä–¥–µ—Ä–∞ –ø–æ ID (Bybit V5, –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã linear).
- –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ –û–¢–ö–†–´–¢–´–• –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É.
- –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—â–µ–º –≤ –ò–°–¢–û–†–ò–ò —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π UUID –∏ "—Ö–≤–æ—Å—Ç" –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –≤ UI).
–í—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞—Ä—å –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω".
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª –∏ ID –æ—Ä–¥–µ—Ä–∞ (–ø–æ–ª–Ω—ã–π UUID –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
SYMBOL = "BTCUSDT"
ORDER_ID = "8730b59c"

def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1","true","yes","y","on"}

def _is_tail_id(s: str) -> bool:
    s = (s or "").strip()
    return len(s) == 8 and all(ch in "0123456789abcdefABCDEF" for ch in s)

def _id_match(target: str, candidate: str) -> bool:
    t = (target or "").strip().lower()
    c = (candidate or "").strip().lower()
    return c == t or (_is_tail_id(t) and c.endswith(t))

def get_order_info(symbol: str, order_id: str) -> dict | None:
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))
    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret,
                timeout=10_000, recv_window=5_000)

    # ---------- 1) –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –û–¢–ö–†–´–¢–´–• –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ symbol ----------
    # –ï—Å–ª–∏ ID –ø–æ–ª–Ω—ã–π ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π —Ñ–∏–ª—å—Ç—Ä, —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ
    if not _is_tail_id(order_id) and len(order_id) > 8:
        r = http.get_open_orders(category="linear", symbol=symbol, orderId=order_id)
        if isinstance(r, dict) and r.get("retCode") == 0:
            items = r.get("result", {}).get("list") or []
            if items:
                return items[0]

    # –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ symbol –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ö–≤–æ—Å—Ç—É/–ø–æ–ª—é
    r = http.get_open_orders(category="linear", symbol=symbol)
    if not isinstance(r, dict) or r.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error (open): {r}")
    for o in r.get("result", {}).get("list") or []:
        if _id_match(order_id, o.get("orderId", "")):
            return o

    # ---------- 2) –ò—â–µ–º –≤ –ò–°–¢–û–†–ò–ò —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ----------
    # –ï—Å–ª–∏ ID –ø–æ–ª–Ω—ã–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä orderId (—Å–µ—Ä–≤–µ—Ä —Å–∞–º –Ω–∞–π–¥—ë—Ç –±—ã—Å—Ç—Ä–µ–µ)
    cursor = None
    pages = 0
    while pages < 10:  # –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        kwargs = {"category": "linear", "symbol": symbol}
        if cursor:
            kwargs["cursor"] = cursor
        if not _is_tail_id(order_id) and len(order_id) > 8:
            kwargs["orderId"] = order_id

        r_hist = http.get_order_history(**kwargs)
        if not isinstance(r_hist, dict) or r_hist.get("retCode") != 0:
            raise RuntimeError(f"Bybit API error (history): {r_hist}")

        items = r_hist.get("result", {}).get("list") or []
        for o in items:
            if _id_match(order_id, o.get("orderId", "")):
                return o

        cursor = r_hist.get("result", {}).get("nextPageCursor")
        pages += 1
        if not cursor:
            break

    return None

if __name__ == "__main__":
    try:
        info = get_order_info(SYMBOL, ORDER_ID)
        if info:
            print(info)
        else:
            print("–Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
