# order_monitor_websocket.py
# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket (Bybit V5).
- –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É WebSocket –∫–∞–Ω–∞–ª—É 'order'
- –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã (orderStatus="Filled") –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º Order IDs
- –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
- –ö–ª—é—á–∏ —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ .env
"""

import os
import sys
import json
import time
import hmac
import hashlib
from datetime import datetime
from dotenv import load_dotenv
import websocket

# üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
SYMBOL = "BTCUSDT"  # –°–∏–º–≤–æ–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
ORDER_IDS = ["32bc732f-9064-4750-83f7-924d9bb3f1d2"]  # –°–ø–∏—Å–æ–∫ Order ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è


class OrderMonitor:
    def __init__(self, symbol: str, order_ids: list[str]):
        load_dotenv()
        self.symbol = symbol
        self.order_ids = set(order_ids)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.filled_orders = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã
        self.api_key = os.getenv("BYBIT_API_KEY")
        self.api_secret = os.getenv("BYBIT_API_SECRET")
        self.testnet = self._str_to_bool(os.getenv("BYBIT_TESTNET"))

        if not self.api_key or not self.api_secret:
            raise RuntimeError("–ù–µ—Ç –∫–ª—é—á–µ–π BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

        if not self.order_ids:
            raise ValueError("–°–ø–∏—Å–æ–∫ order_ids –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        self.ws_url = "wss://stream-testnet.bybit.com/v5/private" if self.testnet else "wss://stream.bybit.com/v5/private"
        self.ws = None

        print(
            f"[{self._get_timestamp()}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(self.order_ids)} –æ—Ä–¥–µ—Ä–æ–≤: {list(self.order_ids)}")

    @staticmethod
    def _str_to_bool(v: str | None) -> bool:
        return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}

    def _generate_signature(self, expires: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket"""
        param_str = f'GET/realtime{expires}'
        return hmac.new(
            self.api_secret.encode('utf-8'),
            param_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

    def _on_open(self, ws):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print(f"[{self._get_timestamp()}] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        expires = int((time.time() + 10) * 1000)
        signature = self._generate_signature(expires)

        auth_message = {
            "op": "auth",
            "args": [self.api_key, expires, signature]
        }

        ws.send(json.dumps(auth_message))
        print(f"[{self._get_timestamp()}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")

    def _on_message(self, ws, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
        try:
            data = json.loads(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            if data.get("op") == "auth" and data.get("success"):
                print(f"[{self._get_timestamp()}] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª order
                subscribe_message = {
                    "op": "subscribe",
                    "args": ["order"]
                }
                ws.send(json.dumps(subscribe_message))
                print(f"[{self._get_timestamp()}] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 'order' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                return

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if data.get("op") == "subscribe" and data.get("success"):
                print(f"[{self._get_timestamp()}] –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 'order'")
                print(f"[{self._get_timestamp()}] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {self.symbol} –∑–∞–ø—É—â–µ–Ω...")
                print(f"[{self._get_timestamp()}] –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ Order IDs: {list(self.order_ids)}")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            if data.get("topic") == "order" and "data" in data:
                self._process_order_data(data["data"])

        except json.JSONDecodeError as e:
            print(f"[{self._get_timestamp()}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        except Exception as e:
            print(f"[{self._get_timestamp()}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def _process_order_data(self, orders_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        for order in orders_data:
            symbol = order.get("symbol", "")
            order_id = order.get("orderId", "")
            order_status = order.get("orderStatus", "")

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Å–∏–º–≤–æ–ª, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–¥–µ—Ä—ã –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            if (symbol == self.symbol and
                    order_id in self.order_ids and
                    order_status == "Filled" and
                    order_id not in self.filled_orders):

                self._log_filled_order(order)
                self.filled_orders.add(order_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ—Ä–¥–µ—Ä—ã –∏—Å–ø–æ–ª–Ω–µ–Ω—ã
                if len(self.filled_orders) == len(self.order_ids):
                    print(f"\n[{self._get_timestamp()}] üéâ –í–°–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï –û–†–î–ï–†–´ –ò–°–ü–û–õ–ù–ï–ù–´!")
                    print(
                        f"[{self._get_timestamp()}] –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {len(self.filled_orders)}/{len(self.order_ids)} –æ—Ä–¥–µ—Ä–æ–≤")
                    print(f"[{self._get_timestamp()}] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                    self.ws.close()

    def _log_filled_order(self, order):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        order_id = order.get("orderId", "N/A")
        order_link_id = order.get("orderLinkId", "N/A")
        side = order.get("side", "N/A")
        order_type = order.get("orderType", "N/A")
        qty = order.get("qty", "0")
        price = order.get("avgPrice", order.get("price", "0"))
        cumulative_qty = order.get("cumExecQty", "0")

        timestamp = self._get_timestamp()
        remaining = len(self.order_ids) - len(self.filled_orders) - 1

        log_message = (
            f"[{timestamp}] ‚úÖ ORDER FILLED: {self.symbol} | "
            f"ID: {order_id} | LinkID: {order_link_id} | "
            f"Type: {order_type} | Side: {side} | "
            f"Qty: {qty} | Executed: {cumulative_qty} | "
            f"Price: {price} | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
        )

        print(log_message)

    def _on_error(self, _, error):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ WebSocket"""
        print(f"[{self._get_timestamp()}] WebSocket –æ—à–∏–±–∫–∞: {error}")

    def _on_close(self, _, close_status_code, close_msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print(
            f"[{self._get_timestamp()}] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥: {close_status_code}, –°–æ–æ–±—â–µ–Ω–∏–µ: {close_msg}")

    @staticmethod
    def _get_timestamp() -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        print(f"[{self._get_timestamp()}] –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {self.symbol}")
        print(f"[{self._get_timestamp()}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {'TESTNET' if self.testnet else 'MAINNET'}")

        websocket.enableTrace(False)
        self.ws = websocket.WebSocketApp(
            self.ws_url,
            on_open=self._on_open,
            on_message=self._on_message,
            on_error=self._on_error,
            on_close=self._on_close
        )

        try:
            self.ws.run_forever()
        except KeyboardInterrupt:
            print(f"\n[{self._get_timestamp()}] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"[{self._get_timestamp()}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)


def main():
    try:
        monitor = OrderMonitor(SYMBOL, ORDER_IDS)
        monitor.start_monitoring()
    except Exception as e:
        print(f"ERROR: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()