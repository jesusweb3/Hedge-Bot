# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (–ª–æ–Ω–≥/—à–æ—Ä—Ç) –≤ —Ö–µ–¥–∂-—Ä–µ–∂–∏–º–µ Bybit V5.
–†–∞–±–æ—Ç–∞–µ—Ç —Å –ª–∏–Ω–µ–π–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ (category="linear").
–ß–∏—Ç–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ .env.
–í –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—ë–º SYMBOL –∏ SIDE ("long" –∏–ª–∏ "short").
–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—á–∞—Ç–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ "–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏".
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SYMBOL = "BTCUSDT"
SIDE = "short"   # –≤–∞—Ä–∏–∞–Ω—Ç—ã: "long" –∏–ª–∏ "short"

def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}

def get_position_side_for_hedg(symbol: str, side: str) -> dict | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (long/short) –∏–ª–∏ None.
    """
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç –∫–ª—é—á–µ–π BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret,
                timeout=10_000, recv_window=5_000)

    resp = http.get_positions(category="linear", symbol=symbol)
    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    items = resp["result"]["list"] or []

    idx_map = {"long": 1, "short": 2}
    idx = idx_map.get(side.lower())
    if idx is None:
        raise ValueError("side –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'long' –∏–ª–∏ 'short'")

    for p in items:
        if int(p.get("positionIdx", 0)) == idx:
            if float(p.get("size", "0")) != 0:  # –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
                return p
            break
    return None

if __name__ == "__main__":
    try:
        pos = get_position_side_for_hedg(SYMBOL, SIDE)
        if pos:
            print(pos)
        else:
            print("–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
