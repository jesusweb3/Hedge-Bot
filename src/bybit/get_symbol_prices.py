# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Å–∏–º–≤–æ–ª–∞ (last/mark/index) –Ω–∞ Bybit (V5).
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º —Ä—ã–Ω–∫–æ–º (category="linear").
–ß–∏—Ç–∞–µ—Ç BYBIT_TESTNET –∏–∑ .env.
–í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ –∑–∞–¥–∞—ë—Ç—Å—è SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT").
–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—á–∞—Ç–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Ü–µ–Ω–∞–º–∏.
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –°–∏–º–≤–æ–ª —É–∫–∞–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å
SYMBOL = "BTCUSDT"


def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}


def get_symbol_prices(symbol: str) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ {last, mark, index}.
    """
    load_dotenv()
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    http = HTTP(testnet=testnet, timeout=10_000, recv_window=5_000)

    resp = http.get_tickers(category="linear", symbol=symbol)

    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    tickers = resp["result"]["list"]
    if not tickers:
        raise RuntimeError("–°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    t = tickers[0]
    return {
        "last": float(t["lastPrice"]),
        "mark": float(t["markPrice"]),
        "index": float(t["indexPrice"]),
    }


if __name__ == "__main__":
    try:
        prices = get_symbol_prices(SYMBOL)
        print(prices)
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
