# -*- coding: utf-8 -*-
"""
–†—ã–Ω–æ—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å reduce-only –¥–ª—è Bybit V5 (linear).
- –£–∫–∞–∂–∏ SYMBOL –∏ SIDE ("long" –∏–ª–∏ "short") –Ω–∏–∂–µ.
- –ú–æ–¥—É–ª—å —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç positionIdx (1 –¥–ª—è long, 2 –¥–ª—è short –ø—Ä–∏ Hedge; 0/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ One-Way).
- –ü–µ—á–∞—Ç–∞–µ—Ç: "SUCCESS <orderId>" | "NO POSITION" | "ERROR: ...".
"""

import os
import sys
import uuid
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SYMBOL = "BTCUSDT"
SIDE = "long"   # "long" –∏–ª–∏ "short"

def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}

def close_position_market(symbol: str, side: str) -> str | None:
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç –∫–ª—é—á–µ–π BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret,
                timeout=10_000, recv_window=5_000)

    side = side.lower().strip()
    if side not in {"long", "short"}:
        raise ValueError("SIDE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'long' –∏–ª–∏ 'short'")

    # 1) –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
    resp_pos = http.get_positions(category="linear", symbol=symbol)
    if not isinstance(resp_pos, dict) or resp_pos.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error (positions): {resp_pos}")

    items = resp_pos["result"]["list"] or []

    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:
    # Hedge mode: long -> positionIdx=1 (side=Buy), short -> positionIdx=2 (side=Sell)
    # One-Way   : –æ–±—ã—á–Ω–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å —Å positionIdx=0/1 –∏ side Buy/Sell –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    target = None
    for p in items:
        p_side = (p.get("side") or "").lower()
        p_size = float(p.get("size", "0") or "0")
        if p_size == 0:
            continue
        if side == "long" and p_side == "buy":
            target = p
            break
        if side == "short" and p_side == "sell":
            target = p
            break

    if not target:
        return None  # NO POSITION

    qty = target["size"]  # —Å—Ç—Ä–æ–∫–∞
    pos_idx = int(target.get("positionIdx", 0))

    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
    order_side = "Sell" if side == "long" else "Buy"
    order_args = dict(
        category="linear",
        symbol=symbol,
        side=order_side,
        orderType="Market",
        qty=qty,
        timeInForce="IOC",
        reduceOnly=True,
        orderLinkId=f"close-{uuid.uuid4().hex[:10]}",
    )

    # –í Hedge-—Ä–µ–∂–∏–º–µ –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π positionIdx (1 –¥–ª—è long, 2 –¥–ª—è short)
    # –í One-Way –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å (–∏–ª–∏ pos_idx –±—É–¥–µ—Ç 0/1 ‚Äî –±–∏—Ä–∂–∞ –ø—Ä–∏–º–µ—Ç).
    if pos_idx in (1, 2):
        order_args["positionIdx"] = pos_idx

    resp_order = http.place_order(**order_args)
    if not isinstance(resp_order, dict) or resp_order.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error (order): {resp_order}")

    return resp_order["result"]["orderId"]

if __name__ == "__main__":
    try:
        order_id = close_position_market(SYMBOL, SIDE)
        if order_id:
            print(f"SUCCESS {order_id}")
        else:
            print("NO POSITION")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
