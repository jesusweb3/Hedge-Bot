# place_limit_order.py
# -*- coding: utf-8 -*-
"""
–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è (Bybit V5).
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª–∏–Ω–µ–π–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–∞—Ö (category="linear").
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ö–µ–¥–∂-—Ä–µ–∂–∏–º —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏.
- –ö–ª—é—á–∏ —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ .env.
- –í –∫–æ–¥–µ –∑–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ (symbol, side, qty, price, hedge_side).
- –ò—Ç–æ–≥: –ø–µ—á–∞—Ç–∞–µ—Ç "SUCCESS <orderId>" –∏–ª–∏ "ERROR: ...".
"""

import os
import sys
import uuid
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
SYMBOL = "BTCUSDT"
SIDE = "Sell"  # "Buy" –∏–ª–∏ "Sell"
QTY = "0.001"  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
PRICE = "113800"  # –ª–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞
HEDGE_SIDE = "short"  # "long" –∏–ª–∏ "short" - —Å—Ç–æ—Ä–æ–Ω–∞ —Ö–µ–¥–∂-–ø–æ–∑–∏—Ü–∏–∏
TIME_IN_FORCE = "GTC"  # "GTC", "IOC", "FOK"


def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}


def _get_position_idx(hedge_side: str) -> int:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ö–µ–¥–∂–∞ –≤ positionIdx.
    long -> 1, short -> 2
    """
    hedge_side_lower = hedge_side.lower().strip()
    if hedge_side_lower == "long":
        return 1
    elif hedge_side_lower == "short":
        return 2
    else:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Ö–µ–¥–∂–∞: {hedge_side}. –î–æ–ø—É—Å—Ç–∏–º—ã: 'long', 'short'")


def place_limit_order(symbol: str, side: str, qty: str, price: str,
                      hedge_side: str, time_in_force: str = "GTC") -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
        side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ("Buy" –∏–ª–∏ "Sell")
        qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price: –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞
        hedge_side: –°—Ç–æ—Ä–æ–Ω–∞ —Ö–µ–¥–∂-–ø–æ–∑–∏—Ü–∏–∏ ("long" –∏–ª–∏ "short")
        time_in_force: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—Ä–¥–µ—Ä–∞ ("GTC", "IOC", "FOK")

    Returns:
        orderId –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

    Raises:
        RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–µ API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π
        ValueError: –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    """
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç –∫–ª—é—á–µ–π BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    position_idx = _get_position_idx(hedge_side)

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret,
                timeout=10_000, recv_window=5_000)

    resp = http.place_order(
        category="linear",
        symbol=symbol,
        side=side,
        orderType="Limit",
        qty=qty,
        price=price,
        positionIdx=position_idx,
        timeInForce=time_in_force,
        orderLinkId=f"limit-{uuid.uuid4().hex[:10]}"
    )

    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    return resp["result"]["orderId"]


if __name__ == "__main__":
    try:
        oid = place_limit_order(SYMBOL, SIDE, QTY, PRICE, HEDGE_SIDE, TIME_IN_FORCE)
        print(f"SUCCESS {oid}")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)