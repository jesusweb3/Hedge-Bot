# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å: –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á—ë–Ω –ª–∏ Hedge –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û —Å–∏–º–≤–æ–ª–∞ (Bybit V5).
–õ–æ–≥–∏–∫–∞: /v5/position/list —Å category="linear" –∏ symbol=..., —Å–º–æ—Ç—Ä–∏–º positionIdx.
- Hedge: –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –∏ 1, –∏ 2 (–¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã)
- One-Way: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å positionIdx=0 (–∏–ª–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞)
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª –∑–¥–µ—Å—å
SYMBOL = "BTCUSDT"

def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}

def check_hedge_mode(symbol: str) -> bool:
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret, timeout=10_000, recv_window=5_000)

    # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º symbol, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∑–∏—Ü–∏–π
    resp = http.get_positions(category="linear", symbol=symbol)
    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    items = resp["result"]["list"] or []
    idxs = {int(i.get("positionIdx", 0)) for i in items}

    # Hedge = –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã (1 –∏ 2)
    return 1 in idxs and 2 in idxs

if __name__ == "__main__":
    try:
        enabled = check_hedge_mode(SYMBOL)
        print("–í–∫–ª—é—á–µ–Ω" if enabled else "–í—ã–∫–ª—é—á–µ–Ω")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
