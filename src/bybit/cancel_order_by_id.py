# -*- coding: utf-8 -*-
"""
–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ ID (Bybit V5, –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã linear).
- SYMBOL –∏ ORDER_ID –∑–∞–¥–∞—ë–º –Ω–∏–∂–µ.
- ORDER_ID –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—ã–º UUID –∏–ª–∏ —Ö–≤–æ—Å—Ç–æ–º –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤.
- –ò—â–µ–º —Å—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª—É; –ø—Ä–∏ —Ö–≤–æ—Å—Ç–µ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π ID.
- –í—ã–≤–æ–¥: "SUCCESS <orderId>" | "NOT FOUND" | "ERROR: ...".
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß —É–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª –∏ id
SYMBOL = "BTCUSDT"
ORDER_ID = "42fae275"  # –ø–æ–ª–Ω—ã–π UUID –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–∏–º–≤–æ–ª–æ–≤

def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1","true","yes","y","on"}

def _is_tail(s: str) -> bool:
    s = (s or "").strip()
    return len(s) == 8 and all(ch in "0123456789abcdefABCDEF" for ch in s)

def _match(target: str, candidate: str) -> bool:
    t = (target or "").strip().lower()
    c = (candidate or "").strip().lower()
    return c == t or (_is_tail(t) and c.endswith(t))

def cancel_order_by_id(symbol: str, order_id: str) -> str | None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä –ø–æ ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç orderId –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö.
    """
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))
    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret,
                timeout=10_000, recv_window=5_000)

    full_id = order_id

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ö–≤–æ—Å—Ç –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –Ω–∞–π–¥—ë–º –ø–æ–ª–Ω—ã–π ID —Å—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    if _is_tail(order_id):
        r = http.get_open_orders(category="linear", symbol=symbol)
        if not isinstance(r, dict) or r.get("retCode") != 0:
            raise RuntimeError(f"Bybit API error (open): {r}")
        found_full_id = None
        for order in r.get("result", {}).get("list") or []:
            candidate_id = order.get("orderId", "")
            if _match(order_id, candidate_id):
                found_full_id = candidate_id
                break
        if not found_full_id:
            return None
        full_id = found_full_id

    # –û—Ç–º–µ–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
    resp = http.cancel_order(category="linear", symbol=symbol, orderId=full_id)
    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error (cancel): {resp}")

    return full_id

if __name__ == "__main__":
    try:
        cancelled_id = cancel_order_by_id(SYMBOL, ORDER_ID)
        if cancelled_id:
            print(f"SUCCESS {cancelled_id}")
        else:
            print("NOT FOUND")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
