# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å: –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∏—Ä–∂–µ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ Bybit (V5).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç pybit==5.11.0, —á–∏—Ç–∞–µ—Ç BYBIT_TESTNET –∏–∑ .env.
–í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ –∑–∞–¥–∞—ë—Ç—Å—è SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT").
–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—á–∞—Ç–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤:
- qty_step  : —à–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
- min_qty   : –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- max_qty   : –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- tick_size : —à–∞–≥ —Ü–µ–Ω—ã
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –°–∏–º–≤–æ–ª —É–∫–∞–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å
SYMBOL = "BTCUSDT"


def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}


def get_symbol_filters(symbol: str) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {qty_step, min_qty, max_qty, tick_size}.
    """
    load_dotenv()
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    http = HTTP(testnet=testnet, timeout=10_000, recv_window=5_000)

    resp = http.get_instruments_info(category="linear", symbol=symbol)

    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    instruments = resp["result"]["list"]
    if not instruments:
        raise RuntimeError("–°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    inst = instruments[0]
    lot = inst.get("lotSizeFilter", {})
    price = inst.get("priceFilter", {})

    return {
        "qty_step": lot.get("qtyStep"),
        "min_qty": lot.get("minOrderQty"),
        "max_qty": lot.get("maxOrderQty"),
        "tick_size": price.get("tickSize"),
    }


if __name__ == "__main__":
    try:
        filters = get_symbol_filters(SYMBOL)
        print(filters)
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
