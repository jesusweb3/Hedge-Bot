# -*- coding: utf-8 -*-
"""
–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ (trigger/stop) —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (Bybit V5).
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª–∏–Ω–µ–π–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–∞—Ö (category="linear").
- –ö–ª—é—á–∏ —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ .env.
- –í –∫–æ–¥–µ –∑–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ (symbol, side, qty, trigger_price, trigger_direction).
- –ò—Ç–æ–≥: –ø–µ—á–∞—Ç–∞–µ—Ç "SUCCESS <orderId>" –∏–ª–∏ "ERROR: ...".
"""

import os
import sys
import uuid
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
SYMBOL = "BTCUSDT"
SIDE = "Buy"             # "Buy" –∏–ª–∏ "Sell"
QTY = "0.001"            # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
TRIGGER_PRICE = "115500" # —Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
TRIGGER_BY = "LastPrice" # "LastPrice", "MarkPrice" –∏–ª–∏ "IndexPrice"
TRIGGER_DIRECTION = 2    # 1 = –≤—ã—à–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞, 2 = –Ω–∏–∂–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞

def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}

def place_conditional_market_order(symbol: str, side: str, qty: str,
                                   trigger_price: str, trigger_direction: int,
                                   trigger_by: str="LastPrice") -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç —É—Å–ª–æ–≤–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç orderId –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –ø–æ–¥–Ω–∏–º–∞–µ—Ç RuntimeError –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))
    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç –∫–ª—é—á–µ–π BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret,
                timeout=10_000, recv_window=5_000)

    resp = http.place_order(
        category="linear",
        symbol=symbol,
        side=side,
        orderType="Market",
        qty=qty,
        triggerPrice=trigger_price,
        triggerDirection=trigger_direction,
        triggerBy=trigger_by,
        stopOrderType="Stop",
        timeInForce="IOC",
        orderLinkId=f"cond-{uuid.uuid4().hex[:10]}"
    )

    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    return resp["result"]["orderId"]

if __name__ == "__main__":
    try:
        oid = place_conditional_market_order(SYMBOL, SIDE, QTY, TRIGGER_PRICE, TRIGGER_DIRECTION, TRIGGER_BY)
        print(f"SUCCESS {oid}")
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
