# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É (Bybit V5).
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ (category="linear").
–ß–∏—Ç–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ .env.
–í –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—ë—Ç—Å—è SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT").
–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—á–∞—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π.
"""

import os
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# üîß –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
SYMBOL = "BTCUSDT"

def _str_to_bool(v: str | None) -> bool:
    return (v or "").strip().lower() in {"1", "true", "yes", "y", "on"}

def get_open_positions(symbol: str) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É.
    –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è ‚Äî dict —Å –¥–∞–Ω–Ω—ã–º–∏ Bybit (size, side, entryPrice –∏ —Ç.–¥.).
    """
    load_dotenv()
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = _str_to_bool(os.getenv("BYBIT_TESTNET"))

    if not api_key or not api_secret:
        raise RuntimeError("–ù–µ—Ç BYBIT_API_KEY/BYBIT_API_SECRET –≤ .env")

    http = HTTP(testnet=testnet, api_key=api_key, api_secret=api_secret,
                timeout=10_000, recv_window=5_000)

    resp = http.get_positions(category="linear", symbol=symbol)

    if not isinstance(resp, dict) or resp.get("retCode") != 0:
        raise RuntimeError(f"Bybit API error: {resp}")

    positions = resp["result"]["list"] or []
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ (size != "0")
    open_positions = [p for p in positions if float(p.get("size", "0")) != 0]
    return open_positions

if __name__ == "__main__":
    try:
        pos = get_open_positions(SYMBOL)
        print(pos)
    except Exception as exc:
        print(f"ERROR: {exc}", file=sys.stderr)
        sys.exit(1)
